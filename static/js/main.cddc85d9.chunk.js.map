{"version":3,"sources":["components/SearchForm.js","components/Directory.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","className","type","placeholder","onChange","e","setsearch","target","value","Directory","matched_employee","employee","filter","name","first","toLowerCase","includes","search","map","peep","key","id","src","picture","thumbnail","alt","last","email","phone","axios","get","App","state","setState","API","then","res","data","results","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iSAwBeA,MApBf,SAAoBC,GAEhB,OACI,6BACI,yBAAKC,UAAU,wBACX,wBAAIA,UAAU,SAAd,sBACA,yBAAKA,UAAU,cACX,2BACIA,UAAU,aACVC,KAAK,OACLC,YAAY,SAEZC,SAAU,SAACC,GAAD,OAAOL,EAAMM,UAAUD,EAAEE,OAAOC,cCcnDC,MA1Bf,SAAmBT,GACf,IAAMU,EAAmBV,EAAMW,SAASC,QAAO,SAAAD,GAAQ,OAAIA,EAASE,KAAKC,MAAMC,cAAcC,SAAShB,EAAMiB,OAAOF,kBAEnH,OAEI,2BAAOd,UAAU,kBACb,4BACI,wCACA,0CACA,2CACA,sCACA,uCAEHS,EAAiBQ,KAAI,SAAAC,GAAI,iBACtB,wBAAIlB,UAAU,sBAAsBmB,IAAKD,EAAKE,IAC1C,4BAAI,yBAAKC,IAAG,UAAEH,EAAKI,eAAP,aAAE,EAAcC,UAAWC,IAAI,iBAC3C,sCAAKN,EAAKN,YAAV,aAAK,EAAWa,MAChB,sCAAKP,EAAKN,YAAV,aAAK,EAAWC,OAChB,4BAAKK,EAAKQ,OACV,4BAAKR,EAAKS,a,iBChBf,EACD,WACN,OAAOC,IAAMC,IARL,0CC2CDC,E,4MApCbC,MAAQ,CACNf,OAAQ,GACRN,SAAU,I,EAUZL,UAAY,SAACE,GACX,EAAKyB,SAAS,CAAEhB,OAAQT,K,kEARL,IAAD,OAClB0B,IACGC,MAAK,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAAEtB,SAAUyB,EAAIC,KAAKC,aAC/CC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAS5B,OACE,oCACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,CACEgB,OAAQ0B,KAAKX,MAAMf,OACnBX,UAAWqC,KAAKrC,aAIpB,kBAAC,EAAD,CACEK,SAAUgC,KAAKX,MAAMrB,SACrBM,OAAQ0B,KAAKX,MAAMf,c,GA7BX2B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.cddc85d9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n//import Directory from \"./Directory\";\r\n\r\nfunction SearchForm(props) {\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"jumbotron search-bar\">\r\n                <h1 className=\"title\">Employee Directory</h1>\r\n                <div className=\"form-group\">\r\n                    <input\r\n                        className=\"form-input\"\r\n                        type=\"text\"\r\n                        placeholder=\"Search\"\r\n                        // created an onChange event to handle the setSearch, then setSearch passes the value to search\r\n                        onChange={(e) => props.setsearch(e.target.value)}\r\n                    ></input>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchForm;","import React from \"react\";\r\n//import Search from \"./SearchForm\"\r\n//import API from \"../utils/API\";\r\n\r\nfunction Directory(props) {\r\n    const matched_employee = props.employee.filter(employee => employee.name.first.toLowerCase().includes(props.search.toLowerCase()));\r\n\r\n    return (\r\n        //html component//\r\n        <table className=\"employee-group\">\r\n            <tr>\r\n                <th>Employee</th>\r\n                <th>Last Name:</th>\r\n                <th>First Name:</th>\r\n                <th>Email:</th>\r\n                <th>Phone:</th>\r\n            </tr>\r\n            {matched_employee.map(peep => (\r\n                <tr className=\"employee-group-item\" key={peep.id}>\r\n                    <td><img src={peep.picture?.thumbnail} alt=\"profile pic\" /></td>\r\n                    <td>{peep.name?.last}</td>\r\n                    <td>{peep.name?.first}</td>\r\n                    <td>{peep.email}</td>\r\n                    <td>{peep.phone}</td>\r\n                </tr>\r\n            ))}\r\n        </table >\r\n    );\r\n}\r\n\r\nexport default Directory;\r\n","import axios from \"axios\";\r\nconst BASEURL = \"https://randomuser.me/api/?results=20\";\r\n// const APIKEY = \"&apikey=trilogy\";\r\n\r\n// export default {\r\n//   search: function(query) {\r\n//     return axios.get(BASEURL + query + APIKEY);\r\nexport default {\r\n    Employee: function () {\r\n        return axios.get(BASEURL);\r\n    }\r\n};\r\n","import React, { Component } from \"react\";\nimport './App.css';\nimport SearchForm from \"./components/SearchForm\";\nimport Directory from './components/Directory';\nimport API from \"./utils/API\";\n\n//SIDE NOTE...DON'T USE CLASSES ANYMORE, THEY'RE GOOD BUT USE FUNCTIONS WITH HOOKS!!!!\nclass App extends Component {\n  state = {\n    search: \"\",\n    employee: []\n  };\n\n  componentDidMount() {\n    API.Employee()\n      .then(res => this.setState({ employee: res.data.results }))\n      .catch(err => console.log(err));\n  };\n\n  //repackaging \n  setsearch = (value) => {\n    this.setState({ search: value })\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <SearchForm\n            search={this.state.search}\n            setsearch={this.setsearch} />\n        </div>\n        {/* <Directory employee={employee} useState class uses this.state\n         />; */}\n        <Directory\n          employee={this.state.employee}\n          search={this.state.search}\n        />\n\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}